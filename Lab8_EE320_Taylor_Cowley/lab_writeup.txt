
Exercise 1

Question: How do you detect the start of a new byte?
	You detect the start bit- the signal goes from high to low and stays low for a full bit time period


Question: Why is it important to sample the incoming signal in the middle of the bit period?
	Because on the edges of the bit period is when the bit is changing, so the signal might not be stable and we could get an incorrect reading.


Question: What can happen if the baud rate of the transmitter does not match the baud rate of the receiver?
	Our timing would be off and we would either read the signal too fast- ie reading a single bit too fast- or too slow - ie skipping a bit entirely. Even if the problem were not that drastic, it would make our timing such that we could read the start or the end of the message near the edge of the bit period, producing the problems described in the answer to the previous question.


Question: If the transmitter transmits a message at a baud rate that is much faster than the baud rate expected by the receiver it is possible that the receiver will sample the wrong message. Determine the maximum transmitter baud rate that can be tolerated by the receiver when the receiver is expecting a 19,200 baud rate?
	21,333 BAUD


Question: Determine the minimum transmitter baud rate that can be tolerated by the receiver when the receiver is expecting a message with a 19,200 baud rate?
	17,455 BAUD


Upload: Upload a detailed ASMD of your receiver state machine.
After completing the ASMD diagram, create a conceptual diagram of all of the registers used in your UART
receiver (see Figure 11.12 (b) for an example). This diagram should include all registers (except the state register) and a conceptual diagram of the next state logic for each of these registers.
	I have it on paper. A picture?


Upload: Upload your conceptual diagram of your receiver state machine.
	Lol nope. Losers.


Exercise 2

Exercise 3
rx.vhd testbench

--- Release Reset --- at 4000 ns
--- Test #1 --- at 5000 ns
Successfully received the following byte:01010101
Successfully received the following byte:10101010
Successfully received the following byte:11111111
Successfully received the following byte:00000000
--- Test #3 --- at 2817969.999 ns
--- Test #4 --- at 3703386.66 ns
--- Test #5 --- at 4382469.989 ns
--- Test Done --- at 4955446.663 ns


Exercise 4

Upload: Submit your top-level VHDL file.
Question: Review the synthesis log to determine the state encoding of your transmitter state machine. Cut and
past the encoding of your synthesized state machine for this question.

=========================================================================
*                       Advanced HDL Synthesis                          *
=========================================================================

Analyzing FSM <FSM_1> for best encoding.
Optimizing FSM <urx/state_reg/FSM> on signal <state_reg[1:3]> with gray encoding.
-------------------------
 State       | Encoding
-------------------------
 power_up    | 000
 idle        | 001
 start_state | 011
 bit_read    | 010
 stop_state  | 110
 stop_reject | 111
-------------------------
Analyzing FSM <FSM_0> for best encoding.
Optimizing FSM <utx/state_reg/FSM> on signal <state_reg[1:12]> with one-hot encoding.
-----------------------------
 State       | Encoding
-----------------------------
 idle        | 000000000001
 start_state | 000000000010
 b0          | 000000000100
 b1          | 000000001000
 b2          | 000000010000
 b3          | 000000100000
 b4          | 000001000000
 b5          | 000010000000
 b6          | 000100000000
 b7          | 001000000000
 stop_state  | 010000000000
 re_turn     | 100000000000
-----------------------------




Question: Summarize and justify all of the synthesis warnings you received when synthesizing this circuit.


WARNING:Xst:737 - Found 1-bit latch for signal <rx_busy_next>. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
INFO:Xst:2371 - HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.
WARNING:Xst:737 - Found 1-bit latch for signal <data_strobe>. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
INFO:Xst:2371 - HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.
WARNING:Xst:737 - Found 8-bit latch for signal <data_out_next>. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
INFO:Xst:2371 - HDL ADVISOR - Logic functions respectively driving the data and gate enable inputs of this latch share common terms. This situation will potentially lead to setup/hold violations and, as a result, to simulation problems. This situation may come from an incomplete case statement (all selector values are not covered). You should carefully review if it was in your intentions to describe such a latch.

WARNING:Xst:646 - Signal <receiver_busy> is assigned but never used. This unconnected signal will be trimmed during the optimization process.
WARNING:Xst:646 - Signal <busy> is assigned but never used. This unconnected signal will be trimmed during the optimization process.
WARNING:Xst:737 - Found 4-bit latch for signal <btn_out>. Latches may be generated from incomplete case or if statements. We do not recommend the use of latches in FPGA/CPLD designs, as they may lead to timing problems.
 

WARNING:Xst:1293 - FF/Latch <bit_number_3> has a constant value of 0 in block <rx>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <bit_number_3> has a constant value of 0 in block <rx>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <bit_number_3> has a constant value of 0 in block <rx>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:2677 - Node <utx/tx_busy> of sequential type is unconnected in block <top>.
WARNING:Xst:2677 - Node <urx/rx_busy_next> of sequential type is unconnected in block <top>.
WARNING:Xst:2677 - Node <urx/rx_busy_reg> of sequential type is unconnected in block <top>.



  Number of occupied Slices:            119 out of   4,656    2%


